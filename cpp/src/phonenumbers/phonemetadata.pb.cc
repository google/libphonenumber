// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phonemetadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "phonemetadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace i18n {
namespace phonenumbers {

void protobuf_ShutdownFile_phonemetadata_2eproto() {
  delete NumberFormat::default_instance_;
  delete PhoneNumberDesc::default_instance_;
  delete PhoneMetadata::default_instance_;
  delete PhoneMetadataCollection::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_phonemetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_phonemetadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  NumberFormat::default_instance_ = new NumberFormat();
  PhoneNumberDesc::default_instance_ = new PhoneNumberDesc();
  PhoneMetadata::default_instance_ = new PhoneMetadata();
  PhoneMetadataCollection::default_instance_ = new PhoneMetadataCollection();
  NumberFormat::default_instance_->InitAsDefaultInstance();
  PhoneNumberDesc::default_instance_->InitAsDefaultInstance();
  PhoneMetadata::default_instance_->InitAsDefaultInstance();
  PhoneMetadataCollection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_phonemetadata_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_phonemetadata_2eproto_once_);
void protobuf_AddDesc_phonemetadata_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_phonemetadata_2eproto_once_,
                 &protobuf_AddDesc_phonemetadata_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_phonemetadata_2eproto {
  StaticDescriptorInitializer_phonemetadata_2eproto() {
    protobuf_AddDesc_phonemetadata_2eproto();
  }
} static_descriptor_initializer_phonemetadata_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int NumberFormat::kPatternFieldNumber;
const int NumberFormat::kFormatFieldNumber;
const int NumberFormat::kLeadingDigitsPatternFieldNumber;
const int NumberFormat::kNationalPrefixFormattingRuleFieldNumber;
const int NumberFormat::kNationalPrefixOptionalWhenFormattingFieldNumber;
const int NumberFormat::kDomesticCarrierCodeFormattingRuleFieldNumber;
#endif  // !_MSC_VER

NumberFormat::NumberFormat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NumberFormat::InitAsDefaultInstance() {
}

NumberFormat::NumberFormat(const NumberFormat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NumberFormat::SharedCtor() {
  _cached_size_ = 0;
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  national_prefix_formatting_rule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  national_prefix_optional_when_formatting_ = false;
  domestic_carrier_code_formatting_rule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NumberFormat::~NumberFormat() {
  SharedDtor();
}

void NumberFormat::SharedDtor() {
  if (pattern_ != &::google::protobuf::internal::kEmptyString) {
    delete pattern_;
  }
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    delete format_;
  }
  if (national_prefix_formatting_rule_ != &::google::protobuf::internal::kEmptyString) {
    delete national_prefix_formatting_rule_;
  }
  if (domestic_carrier_code_formatting_rule_ != &::google::protobuf::internal::kEmptyString) {
    delete domestic_carrier_code_formatting_rule_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NumberFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NumberFormat& NumberFormat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_phonemetadata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_phonemetadata_2eproto();
#endif
  return *default_instance_;
}

NumberFormat* NumberFormat::default_instance_ = NULL;

NumberFormat* NumberFormat::New() const {
  return new NumberFormat;
}

void NumberFormat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::kEmptyString) {
        pattern_->clear();
      }
    }
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::kEmptyString) {
        format_->clear();
      }
    }
    if (has_national_prefix_formatting_rule()) {
      if (national_prefix_formatting_rule_ != &::google::protobuf::internal::kEmptyString) {
        national_prefix_formatting_rule_->clear();
      }
    }
    national_prefix_optional_when_formatting_ = false;
    if (has_domestic_carrier_code_formatting_rule()) {
      if (domestic_carrier_code_formatting_rule_ != &::google::protobuf::internal::kEmptyString) {
        domestic_carrier_code_formatting_rule_->clear();
      }
    }
  }
  leading_digits_pattern_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NumberFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pattern = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_format;
        break;
      }

      // required string format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leading_digits_pattern;
        break;
      }

      // repeated string leading_digits_pattern = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leading_digits_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_leading_digits_pattern()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leading_digits_pattern;
        if (input->ExpectTag(34)) goto parse_national_prefix_formatting_rule;
        break;
      }

      // optional string national_prefix_formatting_rule = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_national_prefix_formatting_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_national_prefix_formatting_rule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_domestic_carrier_code_formatting_rule;
        break;
      }

      // optional string domestic_carrier_code_formatting_rule = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domestic_carrier_code_formatting_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domestic_carrier_code_formatting_rule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_national_prefix_optional_when_formatting;
        break;
      }

      // optional bool national_prefix_optional_when_formatting = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_national_prefix_optional_when_formatting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &national_prefix_optional_when_formatting_)));
          set_has_national_prefix_optional_when_formatting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NumberFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string pattern = 1;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pattern(), output);
  }

  // required string format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->format(), output);
  }

  // repeated string leading_digits_pattern = 3;
  for (int i = 0; i < this->leading_digits_pattern_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->leading_digits_pattern(i), output);
  }

  // optional string national_prefix_formatting_rule = 4;
  if (has_national_prefix_formatting_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->national_prefix_formatting_rule(), output);
  }

  // optional string domestic_carrier_code_formatting_rule = 5;
  if (has_domestic_carrier_code_formatting_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->domestic_carrier_code_formatting_rule(), output);
  }

  // optional bool national_prefix_optional_when_formatting = 6;
  if (has_national_prefix_optional_when_formatting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->national_prefix_optional_when_formatting(), output);
  }

}

int NumberFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pattern = 1;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // required string format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional string national_prefix_formatting_rule = 4;
    if (has_national_prefix_formatting_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->national_prefix_formatting_rule());
    }

    // optional bool national_prefix_optional_when_formatting = 6;
    if (has_national_prefix_optional_when_formatting()) {
      total_size += 1 + 1;
    }

    // optional string domestic_carrier_code_formatting_rule = 5;
    if (has_domestic_carrier_code_formatting_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domestic_carrier_code_formatting_rule());
    }

  }
  // repeated string leading_digits_pattern = 3;
  total_size += 1 * this->leading_digits_pattern_size();
  for (int i = 0; i < this->leading_digits_pattern_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->leading_digits_pattern(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumberFormat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NumberFormat*>(&from));
}

void NumberFormat::MergeFrom(const NumberFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  leading_digits_pattern_.MergeFrom(from.leading_digits_pattern_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_national_prefix_formatting_rule()) {
      set_national_prefix_formatting_rule(from.national_prefix_formatting_rule());
    }
    if (from.has_national_prefix_optional_when_formatting()) {
      set_national_prefix_optional_when_formatting(from.national_prefix_optional_when_formatting());
    }
    if (from.has_domestic_carrier_code_formatting_rule()) {
      set_domestic_carrier_code_formatting_rule(from.domestic_carrier_code_formatting_rule());
    }
  }
}

void NumberFormat::CopyFrom(const NumberFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberFormat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NumberFormat::Swap(NumberFormat* other) {
  if (other != this) {
    std::swap(pattern_, other->pattern_);
    std::swap(format_, other->format_);
    leading_digits_pattern_.Swap(&other->leading_digits_pattern_);
    std::swap(national_prefix_formatting_rule_, other->national_prefix_formatting_rule_);
    std::swap(national_prefix_optional_when_formatting_, other->national_prefix_optional_when_formatting_);
    std::swap(domestic_carrier_code_formatting_rule_, other->domestic_carrier_code_formatting_rule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NumberFormat::GetTypeName() const {
  return "i18n.phonenumbers.NumberFormat";
}


// ===================================================================

#ifndef _MSC_VER
const int PhoneNumberDesc::kNationalNumberPatternFieldNumber;
const int PhoneNumberDesc::kPossibleNumberPatternFieldNumber;
const int PhoneNumberDesc::kExampleNumberFieldNumber;
#endif  // !_MSC_VER

PhoneNumberDesc::PhoneNumberDesc()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PhoneNumberDesc::InitAsDefaultInstance() {
}

PhoneNumberDesc::PhoneNumberDesc(const PhoneNumberDesc& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PhoneNumberDesc::SharedCtor() {
  _cached_size_ = 0;
  national_number_pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  possible_number_pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  example_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhoneNumberDesc::~PhoneNumberDesc() {
  SharedDtor();
}

void PhoneNumberDesc::SharedDtor() {
  if (national_number_pattern_ != &::google::protobuf::internal::kEmptyString) {
    delete national_number_pattern_;
  }
  if (possible_number_pattern_ != &::google::protobuf::internal::kEmptyString) {
    delete possible_number_pattern_;
  }
  if (example_number_ != &::google::protobuf::internal::kEmptyString) {
    delete example_number_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PhoneNumberDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PhoneNumberDesc& PhoneNumberDesc::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_phonemetadata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_phonemetadata_2eproto();
#endif
  return *default_instance_;
}

PhoneNumberDesc* PhoneNumberDesc::default_instance_ = NULL;

PhoneNumberDesc* PhoneNumberDesc::New() const {
  return new PhoneNumberDesc;
}

void PhoneNumberDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_national_number_pattern()) {
      if (national_number_pattern_ != &::google::protobuf::internal::kEmptyString) {
        national_number_pattern_->clear();
      }
    }
    if (has_possible_number_pattern()) {
      if (possible_number_pattern_ != &::google::protobuf::internal::kEmptyString) {
        possible_number_pattern_->clear();
      }
    }
    if (has_example_number()) {
      if (example_number_ != &::google::protobuf::internal::kEmptyString) {
        example_number_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PhoneNumberDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string national_number_pattern = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_national_number_pattern()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_possible_number_pattern;
        break;
      }

      // optional string possible_number_pattern = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_possible_number_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_possible_number_pattern()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_example_number;
        break;
      }

      // optional string example_number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_example_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_example_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PhoneNumberDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string national_number_pattern = 2;
  if (has_national_number_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->national_number_pattern(), output);
  }

  // optional string possible_number_pattern = 3;
  if (has_possible_number_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->possible_number_pattern(), output);
  }

  // optional string example_number = 6;
  if (has_example_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->example_number(), output);
  }

}

int PhoneNumberDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string national_number_pattern = 2;
    if (has_national_number_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->national_number_pattern());
    }

    // optional string possible_number_pattern = 3;
    if (has_possible_number_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->possible_number_pattern());
    }

    // optional string example_number = 6;
    if (has_example_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->example_number());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneNumberDesc::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PhoneNumberDesc*>(&from));
}

void PhoneNumberDesc::MergeFrom(const PhoneNumberDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_national_number_pattern()) {
      set_national_number_pattern(from.national_number_pattern());
    }
    if (from.has_possible_number_pattern()) {
      set_possible_number_pattern(from.possible_number_pattern());
    }
    if (from.has_example_number()) {
      set_example_number(from.example_number());
    }
  }
}

void PhoneNumberDesc::CopyFrom(const PhoneNumberDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneNumberDesc::IsInitialized() const {

  return true;
}

void PhoneNumberDesc::Swap(PhoneNumberDesc* other) {
  if (other != this) {
    std::swap(national_number_pattern_, other->national_number_pattern_);
    std::swap(possible_number_pattern_, other->possible_number_pattern_);
    std::swap(example_number_, other->example_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PhoneNumberDesc::GetTypeName() const {
  return "i18n.phonenumbers.PhoneNumberDesc";
}


// ===================================================================

#ifndef _MSC_VER
const int PhoneMetadata::kGeneralDescFieldNumber;
const int PhoneMetadata::kFixedLineFieldNumber;
const int PhoneMetadata::kMobileFieldNumber;
const int PhoneMetadata::kTollFreeFieldNumber;
const int PhoneMetadata::kPremiumRateFieldNumber;
const int PhoneMetadata::kSharedCostFieldNumber;
const int PhoneMetadata::kPersonalNumberFieldNumber;
const int PhoneMetadata::kVoipFieldNumber;
const int PhoneMetadata::kPagerFieldNumber;
const int PhoneMetadata::kUanFieldNumber;
const int PhoneMetadata::kEmergencyFieldNumber;
const int PhoneMetadata::kVoicemailFieldNumber;
const int PhoneMetadata::kShortCodeFieldNumber;
const int PhoneMetadata::kStandardRateFieldNumber;
const int PhoneMetadata::kCarrierSpecificFieldNumber;
const int PhoneMetadata::kNoInternationalDiallingFieldNumber;
const int PhoneMetadata::kIdFieldNumber;
const int PhoneMetadata::kCountryCodeFieldNumber;
const int PhoneMetadata::kInternationalPrefixFieldNumber;
const int PhoneMetadata::kPreferredInternationalPrefixFieldNumber;
const int PhoneMetadata::kNationalPrefixFieldNumber;
const int PhoneMetadata::kPreferredExtnPrefixFieldNumber;
const int PhoneMetadata::kNationalPrefixForParsingFieldNumber;
const int PhoneMetadata::kNationalPrefixTransformRuleFieldNumber;
const int PhoneMetadata::kSameMobileAndFixedLinePatternFieldNumber;
const int PhoneMetadata::kNumberFormatFieldNumber;
const int PhoneMetadata::kIntlNumberFormatFieldNumber;
const int PhoneMetadata::kMainCountryForCodeFieldNumber;
const int PhoneMetadata::kLeadingDigitsFieldNumber;
const int PhoneMetadata::kLeadingZeroPossibleFieldNumber;
const int PhoneMetadata::kMobileNumberPortableRegionFieldNumber;
#endif  // !_MSC_VER

PhoneMetadata::PhoneMetadata()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PhoneMetadata::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  general_desc_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  general_desc_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fixed_line_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  fixed_line_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mobile_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  mobile_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  toll_free_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  toll_free_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  premium_rate_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  premium_rate_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  shared_cost_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  shared_cost_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personal_number_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  personal_number_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  voip_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  voip_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pager_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  pager_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  uan_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  uan_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  emergency_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  emergency_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  voicemail_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  voicemail_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  short_code_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  short_code_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  standard_rate_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  standard_rate_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  carrier_specific_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  carrier_specific_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  no_international_dialling_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
  no_international_dialling_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
}

PhoneMetadata::PhoneMetadata(const PhoneMetadata& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PhoneMetadata::SharedCtor() {
  _cached_size_ = 0;
  general_desc_ = NULL;
  fixed_line_ = NULL;
  mobile_ = NULL;
  toll_free_ = NULL;
  premium_rate_ = NULL;
  shared_cost_ = NULL;
  personal_number_ = NULL;
  voip_ = NULL;
  pager_ = NULL;
  uan_ = NULL;
  emergency_ = NULL;
  voicemail_ = NULL;
  short_code_ = NULL;
  standard_rate_ = NULL;
  carrier_specific_ = NULL;
  no_international_dialling_ = NULL;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_code_ = 0;
  international_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preferred_international_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  national_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preferred_extn_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  national_prefix_for_parsing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  national_prefix_transform_rule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  same_mobile_and_fixed_line_pattern_ = false;
  main_country_for_code_ = false;
  leading_digits_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leading_zero_possible_ = false;
  mobile_number_portable_region_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhoneMetadata::~PhoneMetadata() {
  SharedDtor();
}

void PhoneMetadata::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (international_prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete international_prefix_;
  }
  if (preferred_international_prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete preferred_international_prefix_;
  }
  if (national_prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete national_prefix_;
  }
  if (preferred_extn_prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete preferred_extn_prefix_;
  }
  if (national_prefix_for_parsing_ != &::google::protobuf::internal::kEmptyString) {
    delete national_prefix_for_parsing_;
  }
  if (national_prefix_transform_rule_ != &::google::protobuf::internal::kEmptyString) {
    delete national_prefix_transform_rule_;
  }
  if (leading_digits_ != &::google::protobuf::internal::kEmptyString) {
    delete leading_digits_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete general_desc_;
    delete fixed_line_;
    delete mobile_;
    delete toll_free_;
    delete premium_rate_;
    delete shared_cost_;
    delete personal_number_;
    delete voip_;
    delete pager_;
    delete uan_;
    delete emergency_;
    delete voicemail_;
    delete short_code_;
    delete standard_rate_;
    delete carrier_specific_;
    delete no_international_dialling_;
  }
}

void PhoneMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PhoneMetadata& PhoneMetadata::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_phonemetadata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_phonemetadata_2eproto();
#endif
  return *default_instance_;
}

PhoneMetadata* PhoneMetadata::default_instance_ = NULL;

PhoneMetadata* PhoneMetadata::New() const {
  return new PhoneMetadata;
}

void PhoneMetadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_general_desc()) {
      if (general_desc_ != NULL) general_desc_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_fixed_line()) {
      if (fixed_line_ != NULL) fixed_line_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_mobile()) {
      if (mobile_ != NULL) mobile_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_toll_free()) {
      if (toll_free_ != NULL) toll_free_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_premium_rate()) {
      if (premium_rate_ != NULL) premium_rate_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_shared_cost()) {
      if (shared_cost_ != NULL) shared_cost_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_personal_number()) {
      if (personal_number_ != NULL) personal_number_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_voip()) {
      if (voip_ != NULL) voip_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pager()) {
      if (pager_ != NULL) pager_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_uan()) {
      if (uan_ != NULL) uan_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_emergency()) {
      if (emergency_ != NULL) emergency_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_voicemail()) {
      if (voicemail_ != NULL) voicemail_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_short_code()) {
      if (short_code_ != NULL) short_code_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_standard_rate()) {
      if (standard_rate_ != NULL) standard_rate_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_carrier_specific()) {
      if (carrier_specific_ != NULL) carrier_specific_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_no_international_dialling()) {
      if (no_international_dialling_ != NULL) no_international_dialling_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    country_code_ = 0;
    if (has_international_prefix()) {
      if (international_prefix_ != &::google::protobuf::internal::kEmptyString) {
        international_prefix_->clear();
      }
    }
    if (has_preferred_international_prefix()) {
      if (preferred_international_prefix_ != &::google::protobuf::internal::kEmptyString) {
        preferred_international_prefix_->clear();
      }
    }
    if (has_national_prefix()) {
      if (national_prefix_ != &::google::protobuf::internal::kEmptyString) {
        national_prefix_->clear();
      }
    }
    if (has_preferred_extn_prefix()) {
      if (preferred_extn_prefix_ != &::google::protobuf::internal::kEmptyString) {
        preferred_extn_prefix_->clear();
      }
    }
    if (has_national_prefix_for_parsing()) {
      if (national_prefix_for_parsing_ != &::google::protobuf::internal::kEmptyString) {
        national_prefix_for_parsing_->clear();
      }
    }
    if (has_national_prefix_transform_rule()) {
      if (national_prefix_transform_rule_ != &::google::protobuf::internal::kEmptyString) {
        national_prefix_transform_rule_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    same_mobile_and_fixed_line_pattern_ = false;
    main_country_for_code_ = false;
    if (has_leading_digits()) {
      if (leading_digits_ != &::google::protobuf::internal::kEmptyString) {
        leading_digits_->clear();
      }
    }
    leading_zero_possible_ = false;
    mobile_number_portable_region_ = false;
  }
  number_format_.Clear();
  intl_number_format_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PhoneMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_general_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fixed_line;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fixed_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed_line()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mobile;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_toll_free;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toll_free:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toll_free()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_premium_rate;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_premium_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_premium_rate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_shared_cost;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shared_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shared_cost()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_personal_number;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_personal_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personal_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_voip;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_id;
        break;
      }

      // required string id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_country_code;
        break;
      }

      // optional int32 country_code = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_code_)));
          set_has_country_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_international_prefix;
        break;
      }

      // optional string international_prefix = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_international_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_international_prefix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_national_prefix;
        break;
      }

      // optional string national_prefix = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_national_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_national_prefix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_preferred_extn_prefix;
        break;
      }

      // optional string preferred_extn_prefix = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preferred_extn_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_extn_prefix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_national_prefix_for_parsing;
        break;
      }

      // optional string national_prefix_for_parsing = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_national_prefix_for_parsing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_national_prefix_for_parsing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_national_prefix_transform_rule;
        break;
      }

      // optional string national_prefix_transform_rule = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_national_prefix_transform_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_national_prefix_transform_rule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_preferred_international_prefix;
        break;
      }

      // optional string preferred_international_prefix = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preferred_international_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_international_prefix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_same_mobile_and_fixed_line_pattern;
        break;
      }

      // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_same_mobile_and_fixed_line_pattern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &same_mobile_and_fixed_line_pattern_)));
          set_has_same_mobile_and_fixed_line_pattern();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_number_format;
        break;
      }

      // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_number_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_number_format;
        if (input->ExpectTag(162)) goto parse_intl_number_format;
        break;
      }

      // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intl_number_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intl_number_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_intl_number_format;
        if (input->ExpectTag(170)) goto parse_pager;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pager:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pager()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_main_country_for_code;
        break;
      }

      // optional bool main_country_for_code = 22 [default = false];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_country_for_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &main_country_for_code_)));
          set_has_main_country_for_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_leading_digits;
        break;
      }

      // optional string leading_digits = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leading_digits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leading_digits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_no_international_dialling;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_no_international_dialling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_no_international_dialling()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_uan;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_leading_zero_possible;
        break;
      }

      // optional bool leading_zero_possible = 26 [default = false];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leading_zero_possible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leading_zero_possible_)));
          set_has_leading_zero_possible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_emergency;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emergency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emergency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_voicemail;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voicemail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voicemail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_short_code;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_short_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_short_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_standard_rate;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_rate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_carrier_specific;
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carrier_specific:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_carrier_specific()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_mobile_number_portable_region;
        break;
      }

      // optional bool mobile_number_portable_region = 32 [default = false];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mobile_number_portable_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mobile_number_portable_region_)));
          set_has_mobile_number_portable_region();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PhoneMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
  if (has_general_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->general_desc(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
  if (has_fixed_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->fixed_line(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->mobile(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
  if (has_toll_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->toll_free(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
  if (has_premium_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->premium_rate(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
  if (has_shared_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->shared_cost(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
  if (has_personal_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->personal_number(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
  if (has_voip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->voip(), output);
  }

  // required string id = 9;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->id(), output);
  }

  // optional int32 country_code = 10;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->country_code(), output);
  }

  // optional string international_prefix = 11;
  if (has_international_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->international_prefix(), output);
  }

  // optional string national_prefix = 12;
  if (has_national_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->national_prefix(), output);
  }

  // optional string preferred_extn_prefix = 13;
  if (has_preferred_extn_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->preferred_extn_prefix(), output);
  }

  // optional string national_prefix_for_parsing = 15;
  if (has_national_prefix_for_parsing()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->national_prefix_for_parsing(), output);
  }

  // optional string national_prefix_transform_rule = 16;
  if (has_national_prefix_transform_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->national_prefix_transform_rule(), output);
  }

  // optional string preferred_international_prefix = 17;
  if (has_preferred_international_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->preferred_international_prefix(), output);
  }

  // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
  if (has_same_mobile_and_fixed_line_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->same_mobile_and_fixed_line_pattern(), output);
  }

  // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
  for (int i = 0; i < this->number_format_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->number_format(i), output);
  }

  // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
  for (int i = 0; i < this->intl_number_format_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->intl_number_format(i), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
  if (has_pager()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->pager(), output);
  }

  // optional bool main_country_for_code = 22 [default = false];
  if (has_main_country_for_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->main_country_for_code(), output);
  }

  // optional string leading_digits = 23;
  if (has_leading_digits()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->leading_digits(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
  if (has_no_international_dialling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->no_international_dialling(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
  if (has_uan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->uan(), output);
  }

  // optional bool leading_zero_possible = 26 [default = false];
  if (has_leading_zero_possible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->leading_zero_possible(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
  if (has_emergency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->emergency(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
  if (has_voicemail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->voicemail(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
  if (has_short_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->short_code(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
  if (has_standard_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->standard_rate(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
  if (has_carrier_specific()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->carrier_specific(), output);
  }

  // optional bool mobile_number_portable_region = 32 [default = false];
  if (has_mobile_number_portable_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->mobile_number_portable_region(), output);
  }

}

int PhoneMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
    if (has_general_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->general_desc());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
    if (has_fixed_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixed_line());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mobile());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
    if (has_toll_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toll_free());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
    if (has_premium_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->premium_rate());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
    if (has_shared_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shared_cost());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
    if (has_personal_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personal_number());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
    if (has_voip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
    if (has_pager()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pager());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
    if (has_uan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uan());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
    if (has_emergency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emergency());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
    if (has_voicemail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voicemail());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
    if (has_short_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->short_code());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
    if (has_standard_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_rate());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
    if (has_carrier_specific()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->carrier_specific());
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
    if (has_no_international_dialling()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->no_international_dialling());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string id = 9;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 country_code = 10;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country_code());
    }

    // optional string international_prefix = 11;
    if (has_international_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->international_prefix());
    }

    // optional string preferred_international_prefix = 17;
    if (has_preferred_international_prefix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_international_prefix());
    }

    // optional string national_prefix = 12;
    if (has_national_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->national_prefix());
    }

    // optional string preferred_extn_prefix = 13;
    if (has_preferred_extn_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_extn_prefix());
    }

    // optional string national_prefix_for_parsing = 15;
    if (has_national_prefix_for_parsing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->national_prefix_for_parsing());
    }

    // optional string national_prefix_transform_rule = 16;
    if (has_national_prefix_transform_rule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->national_prefix_transform_rule());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
    if (has_same_mobile_and_fixed_line_pattern()) {
      total_size += 2 + 1;
    }

    // optional bool main_country_for_code = 22 [default = false];
    if (has_main_country_for_code()) {
      total_size += 2 + 1;
    }

    // optional string leading_digits = 23;
    if (has_leading_digits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leading_digits());
    }

    // optional bool leading_zero_possible = 26 [default = false];
    if (has_leading_zero_possible()) {
      total_size += 2 + 1;
    }

    // optional bool mobile_number_portable_region = 32 [default = false];
    if (has_mobile_number_portable_region()) {
      total_size += 2 + 1;
    }

  }
  // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
  total_size += 2 * this->number_format_size();
  for (int i = 0; i < this->number_format_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->number_format(i));
  }

  // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
  total_size += 2 * this->intl_number_format_size();
  for (int i = 0; i < this->intl_number_format_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intl_number_format(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PhoneMetadata*>(&from));
}

void PhoneMetadata::MergeFrom(const PhoneMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  number_format_.MergeFrom(from.number_format_);
  intl_number_format_.MergeFrom(from.intl_number_format_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_general_desc()) {
      mutable_general_desc()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.general_desc());
    }
    if (from.has_fixed_line()) {
      mutable_fixed_line()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.fixed_line());
    }
    if (from.has_mobile()) {
      mutable_mobile()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.mobile());
    }
    if (from.has_toll_free()) {
      mutable_toll_free()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.toll_free());
    }
    if (from.has_premium_rate()) {
      mutable_premium_rate()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.premium_rate());
    }
    if (from.has_shared_cost()) {
      mutable_shared_cost()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.shared_cost());
    }
    if (from.has_personal_number()) {
      mutable_personal_number()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.personal_number());
    }
    if (from.has_voip()) {
      mutable_voip()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.voip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pager()) {
      mutable_pager()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.pager());
    }
    if (from.has_uan()) {
      mutable_uan()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.uan());
    }
    if (from.has_emergency()) {
      mutable_emergency()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.emergency());
    }
    if (from.has_voicemail()) {
      mutable_voicemail()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.voicemail());
    }
    if (from.has_short_code()) {
      mutable_short_code()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.short_code());
    }
    if (from.has_standard_rate()) {
      mutable_standard_rate()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.standard_rate());
    }
    if (from.has_carrier_specific()) {
      mutable_carrier_specific()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.carrier_specific());
    }
    if (from.has_no_international_dialling()) {
      mutable_no_international_dialling()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.no_international_dialling());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_international_prefix()) {
      set_international_prefix(from.international_prefix());
    }
    if (from.has_preferred_international_prefix()) {
      set_preferred_international_prefix(from.preferred_international_prefix());
    }
    if (from.has_national_prefix()) {
      set_national_prefix(from.national_prefix());
    }
    if (from.has_preferred_extn_prefix()) {
      set_preferred_extn_prefix(from.preferred_extn_prefix());
    }
    if (from.has_national_prefix_for_parsing()) {
      set_national_prefix_for_parsing(from.national_prefix_for_parsing());
    }
    if (from.has_national_prefix_transform_rule()) {
      set_national_prefix_transform_rule(from.national_prefix_transform_rule());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_same_mobile_and_fixed_line_pattern()) {
      set_same_mobile_and_fixed_line_pattern(from.same_mobile_and_fixed_line_pattern());
    }
    if (from.has_main_country_for_code()) {
      set_main_country_for_code(from.main_country_for_code());
    }
    if (from.has_leading_digits()) {
      set_leading_digits(from.leading_digits());
    }
    if (from.has_leading_zero_possible()) {
      set_leading_zero_possible(from.leading_zero_possible());
    }
    if (from.has_mobile_number_portable_region()) {
      set_mobile_number_portable_region(from.mobile_number_portable_region());
    }
  }
}

void PhoneMetadata::CopyFrom(const PhoneMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00010000) != 0x00010000) return false;

  for (int i = 0; i < number_format_size(); i++) {
    if (!this->number_format(i).IsInitialized()) return false;
  }
  for (int i = 0; i < intl_number_format_size(); i++) {
    if (!this->intl_number_format(i).IsInitialized()) return false;
  }
  return true;
}

void PhoneMetadata::Swap(PhoneMetadata* other) {
  if (other != this) {
    std::swap(general_desc_, other->general_desc_);
    std::swap(fixed_line_, other->fixed_line_);
    std::swap(mobile_, other->mobile_);
    std::swap(toll_free_, other->toll_free_);
    std::swap(premium_rate_, other->premium_rate_);
    std::swap(shared_cost_, other->shared_cost_);
    std::swap(personal_number_, other->personal_number_);
    std::swap(voip_, other->voip_);
    std::swap(pager_, other->pager_);
    std::swap(uan_, other->uan_);
    std::swap(emergency_, other->emergency_);
    std::swap(voicemail_, other->voicemail_);
    std::swap(short_code_, other->short_code_);
    std::swap(standard_rate_, other->standard_rate_);
    std::swap(carrier_specific_, other->carrier_specific_);
    std::swap(no_international_dialling_, other->no_international_dialling_);
    std::swap(id_, other->id_);
    std::swap(country_code_, other->country_code_);
    std::swap(international_prefix_, other->international_prefix_);
    std::swap(preferred_international_prefix_, other->preferred_international_prefix_);
    std::swap(national_prefix_, other->national_prefix_);
    std::swap(preferred_extn_prefix_, other->preferred_extn_prefix_);
    std::swap(national_prefix_for_parsing_, other->national_prefix_for_parsing_);
    std::swap(national_prefix_transform_rule_, other->national_prefix_transform_rule_);
    std::swap(same_mobile_and_fixed_line_pattern_, other->same_mobile_and_fixed_line_pattern_);
    number_format_.Swap(&other->number_format_);
    intl_number_format_.Swap(&other->intl_number_format_);
    std::swap(main_country_for_code_, other->main_country_for_code_);
    std::swap(leading_digits_, other->leading_digits_);
    std::swap(leading_zero_possible_, other->leading_zero_possible_);
    std::swap(mobile_number_portable_region_, other->mobile_number_portable_region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PhoneMetadata::GetTypeName() const {
  return "i18n.phonenumbers.PhoneMetadata";
}


// ===================================================================

#ifndef _MSC_VER
const int PhoneMetadataCollection::kMetadataFieldNumber;
#endif  // !_MSC_VER

PhoneMetadataCollection::PhoneMetadataCollection()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PhoneMetadataCollection::InitAsDefaultInstance() {
}

PhoneMetadataCollection::PhoneMetadataCollection(const PhoneMetadataCollection& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PhoneMetadataCollection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhoneMetadataCollection::~PhoneMetadataCollection() {
  SharedDtor();
}

void PhoneMetadataCollection::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PhoneMetadataCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PhoneMetadataCollection& PhoneMetadataCollection::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_phonemetadata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_phonemetadata_2eproto();
#endif
  return *default_instance_;
}

PhoneMetadataCollection* PhoneMetadataCollection::default_instance_ = NULL;

PhoneMetadataCollection* PhoneMetadataCollection::New() const {
  return new PhoneMetadataCollection;
}

void PhoneMetadataCollection::Clear() {
  metadata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PhoneMetadataCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_metadata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PhoneMetadataCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
  for (int i = 0; i < this->metadata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->metadata(i), output);
  }

}

int PhoneMetadataCollection::ByteSize() const {
  int total_size = 0;

  // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
  total_size += 1 * this->metadata_size();
  for (int i = 0; i < this->metadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metadata(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneMetadataCollection::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PhoneMetadataCollection*>(&from));
}

void PhoneMetadataCollection::MergeFrom(const PhoneMetadataCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  metadata_.MergeFrom(from.metadata_);
}

void PhoneMetadataCollection::CopyFrom(const PhoneMetadataCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneMetadataCollection::IsInitialized() const {

  for (int i = 0; i < metadata_size(); i++) {
    if (!this->metadata(i).IsInitialized()) return false;
  }
  return true;
}

void PhoneMetadataCollection::Swap(PhoneMetadataCollection* other) {
  if (other != this) {
    metadata_.Swap(&other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PhoneMetadataCollection::GetTypeName() const {
  return "i18n.phonenumbers.PhoneMetadataCollection";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace phonenumbers
}  // namespace i18n

// @@protoc_insertion_point(global_scope)
