// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phonenumber.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_phonenumber_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_phonenumber_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_phonenumber_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_phonenumber_2eproto {
  static const uint32_t offsets[];
};
namespace i18n {
namespace phonenumbers {
class PhoneNumber;
struct PhoneNumberDefaultTypeInternal;
extern PhoneNumberDefaultTypeInternal _PhoneNumber_default_instance_;
}  // namespace phonenumbers
}  // namespace i18n
PROTOBUF_NAMESPACE_OPEN
template<> ::i18n::phonenumbers::PhoneNumber* Arena::CreateMaybeMessage<::i18n::phonenumbers::PhoneNumber>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace i18n {
namespace phonenumbers {

enum PhoneNumber_CountryCodeSource : int {
  PhoneNumber_CountryCodeSource_UNSPECIFIED = 0,
  PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_PLUS_SIGN = 1,
  PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_IDD = 5,
  PhoneNumber_CountryCodeSource_FROM_NUMBER_WITHOUT_PLUS_SIGN = 10,
  PhoneNumber_CountryCodeSource_FROM_DEFAULT_COUNTRY = 20
};
bool PhoneNumber_CountryCodeSource_IsValid(int value);
constexpr PhoneNumber_CountryCodeSource PhoneNumber_CountryCodeSource_CountryCodeSource_MIN = PhoneNumber_CountryCodeSource_UNSPECIFIED;
constexpr PhoneNumber_CountryCodeSource PhoneNumber_CountryCodeSource_CountryCodeSource_MAX = PhoneNumber_CountryCodeSource_FROM_DEFAULT_COUNTRY;
constexpr int PhoneNumber_CountryCodeSource_CountryCodeSource_ARRAYSIZE = PhoneNumber_CountryCodeSource_CountryCodeSource_MAX + 1;

const std::string& PhoneNumber_CountryCodeSource_Name(PhoneNumber_CountryCodeSource value);
template<typename T>
inline const std::string& PhoneNumber_CountryCodeSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PhoneNumber_CountryCodeSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PhoneNumber_CountryCodeSource_Name.");
  return PhoneNumber_CountryCodeSource_Name(static_cast<PhoneNumber_CountryCodeSource>(enum_t_value));
}
bool PhoneNumber_CountryCodeSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PhoneNumber_CountryCodeSource* value);
// ===================================================================

class PhoneNumber final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.PhoneNumber) */ {
 public:
  inline PhoneNumber() : PhoneNumber(nullptr) {}
  ~PhoneNumber() override;
  explicit PROTOBUF_CONSTEXPR PhoneNumber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhoneNumber(const PhoneNumber& from);
  PhoneNumber(PhoneNumber&& from) noexcept
    : PhoneNumber() {
    *this = ::std::move(from);
  }

  inline PhoneNumber& operator=(const PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneNumber& operator=(PhoneNumber&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PhoneNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhoneNumber* internal_default_instance() {
    return reinterpret_cast<const PhoneNumber*>(
               &_PhoneNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PhoneNumber& a, PhoneNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneNumber* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PhoneNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PhoneNumber>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PhoneNumber& from);
  void MergeFrom(const PhoneNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhoneNumber* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "i18n.phonenumbers.PhoneNumber";
  }
  protected:
  explicit PhoneNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PhoneNumber_CountryCodeSource CountryCodeSource;
  static constexpr CountryCodeSource UNSPECIFIED =
    PhoneNumber_CountryCodeSource_UNSPECIFIED;
  static constexpr CountryCodeSource FROM_NUMBER_WITH_PLUS_SIGN =
    PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_PLUS_SIGN;
  static constexpr CountryCodeSource FROM_NUMBER_WITH_IDD =
    PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_IDD;
  static constexpr CountryCodeSource FROM_NUMBER_WITHOUT_PLUS_SIGN =
    PhoneNumber_CountryCodeSource_FROM_NUMBER_WITHOUT_PLUS_SIGN;
  static constexpr CountryCodeSource FROM_DEFAULT_COUNTRY =
    PhoneNumber_CountryCodeSource_FROM_DEFAULT_COUNTRY;
  static inline bool CountryCodeSource_IsValid(int value) {
    return PhoneNumber_CountryCodeSource_IsValid(value);
  }
  static constexpr CountryCodeSource CountryCodeSource_MIN =
    PhoneNumber_CountryCodeSource_CountryCodeSource_MIN;
  static constexpr CountryCodeSource CountryCodeSource_MAX =
    PhoneNumber_CountryCodeSource_CountryCodeSource_MAX;
  static constexpr int CountryCodeSource_ARRAYSIZE =
    PhoneNumber_CountryCodeSource_CountryCodeSource_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CountryCodeSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CountryCodeSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CountryCodeSource_Name.");
    return PhoneNumber_CountryCodeSource_Name(enum_t_value);
  }
  static inline bool CountryCodeSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CountryCodeSource* value) {
    return PhoneNumber_CountryCodeSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 3,
    kRawInputFieldNumber = 5,
    kPreferredDomesticCarrierCodeFieldNumber = 7,
    kNationalNumberFieldNumber = 2,
    kCountryCodeFieldNumber = 1,
    kItalianLeadingZeroFieldNumber = 4,
    kCountryCodeSourceFieldNumber = 6,
    kNumberOfLeadingZerosFieldNumber = 8,
  };
  // optional string extension = 3;
  bool has_extension() const;
  private:
  bool _internal_has_extension() const;
  public:
  void clear_extension();
  const std::string& extension() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extension(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extension();
  PROTOBUF_NODISCARD std::string* release_extension();
  void set_allocated_extension(std::string* extension);
  private:
  const std::string& _internal_extension() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extension(const std::string& value);
  std::string* _internal_mutable_extension();
  public:

  // optional string raw_input = 5;
  bool has_raw_input() const;
  private:
  bool _internal_has_raw_input() const;
  public:
  void clear_raw_input();
  const std::string& raw_input() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_input(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_input();
  PROTOBUF_NODISCARD std::string* release_raw_input();
  void set_allocated_raw_input(std::string* raw_input);
  private:
  const std::string& _internal_raw_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_input(const std::string& value);
  std::string* _internal_mutable_raw_input();
  public:

  // optional string preferred_domestic_carrier_code = 7;
  bool has_preferred_domestic_carrier_code() const;
  private:
  bool _internal_has_preferred_domestic_carrier_code() const;
  public:
  void clear_preferred_domestic_carrier_code();
  const std::string& preferred_domestic_carrier_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preferred_domestic_carrier_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preferred_domestic_carrier_code();
  PROTOBUF_NODISCARD std::string* release_preferred_domestic_carrier_code();
  void set_allocated_preferred_domestic_carrier_code(std::string* preferred_domestic_carrier_code);
  private:
  const std::string& _internal_preferred_domestic_carrier_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preferred_domestic_carrier_code(const std::string& value);
  std::string* _internal_mutable_preferred_domestic_carrier_code();
  public:

  // required uint64 national_number = 2;
  bool has_national_number() const;
  private:
  bool _internal_has_national_number() const;
  public:
  void clear_national_number();
  uint64_t national_number() const;
  void set_national_number(uint64_t value);
  private:
  uint64_t _internal_national_number() const;
  void _internal_set_national_number(uint64_t value);
  public:

  // required int32 country_code = 1;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  int32_t country_code() const;
  void set_country_code(int32_t value);
  private:
  int32_t _internal_country_code() const;
  void _internal_set_country_code(int32_t value);
  public:

  // optional bool italian_leading_zero = 4;
  bool has_italian_leading_zero() const;
  private:
  bool _internal_has_italian_leading_zero() const;
  public:
  void clear_italian_leading_zero();
  bool italian_leading_zero() const;
  void set_italian_leading_zero(bool value);
  private:
  bool _internal_italian_leading_zero() const;
  void _internal_set_italian_leading_zero(bool value);
  public:

  // optional .i18n.phonenumbers.PhoneNumber.CountryCodeSource country_code_source = 6;
  bool has_country_code_source() const;
  private:
  bool _internal_has_country_code_source() const;
  public:
  void clear_country_code_source();
  ::i18n::phonenumbers::PhoneNumber_CountryCodeSource country_code_source() const;
  void set_country_code_source(::i18n::phonenumbers::PhoneNumber_CountryCodeSource value);
  private:
  ::i18n::phonenumbers::PhoneNumber_CountryCodeSource _internal_country_code_source() const;
  void _internal_set_country_code_source(::i18n::phonenumbers::PhoneNumber_CountryCodeSource value);
  public:

  // optional int32 number_of_leading_zeros = 8 [default = 1];
  bool has_number_of_leading_zeros() const;
  private:
  bool _internal_has_number_of_leading_zeros() const;
  public:
  void clear_number_of_leading_zeros();
  int32_t number_of_leading_zeros() const;
  void set_number_of_leading_zeros(int32_t value);
  private:
  int32_t _internal_number_of_leading_zeros() const;
  void _internal_set_number_of_leading_zeros(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.PhoneNumber)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_input_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preferred_domestic_carrier_code_;
    uint64_t national_number_;
    int32_t country_code_;
    bool italian_leading_zero_;
    int country_code_source_;
    int32_t number_of_leading_zeros_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_phonenumber_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PhoneNumber

// required int32 country_code = 1;
inline bool PhoneNumber::_internal_has_country_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PhoneNumber::has_country_code() const {
  return _internal_has_country_code();
}
inline void PhoneNumber::clear_country_code() {
  _impl_.country_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t PhoneNumber::_internal_country_code() const {
  return _impl_.country_code_;
}
inline int32_t PhoneNumber::country_code() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.country_code)
  return _internal_country_code();
}
inline void PhoneNumber::_internal_set_country_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.country_code_ = value;
}
inline void PhoneNumber::set_country_code(int32_t value) {
  _internal_set_country_code(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.country_code)
}

// required uint64 national_number = 2;
inline bool PhoneNumber::_internal_has_national_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PhoneNumber::has_national_number() const {
  return _internal_has_national_number();
}
inline void PhoneNumber::clear_national_number() {
  _impl_.national_number_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t PhoneNumber::_internal_national_number() const {
  return _impl_.national_number_;
}
inline uint64_t PhoneNumber::national_number() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.national_number)
  return _internal_national_number();
}
inline void PhoneNumber::_internal_set_national_number(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.national_number_ = value;
}
inline void PhoneNumber::set_national_number(uint64_t value) {
  _internal_set_national_number(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.national_number)
}

// optional string extension = 3;
inline bool PhoneNumber::_internal_has_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PhoneNumber::has_extension() const {
  return _internal_has_extension();
}
inline void PhoneNumber::clear_extension() {
  _impl_.extension_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PhoneNumber::extension() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.extension)
  return _internal_extension();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhoneNumber::set_extension(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.extension_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.extension)
}
inline std::string* PhoneNumber::mutable_extension() {
  std::string* _s = _internal_mutable_extension();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumber.extension)
  return _s;
}
inline const std::string& PhoneNumber::_internal_extension() const {
  return _impl_.extension_.Get();
}
inline void PhoneNumber::_internal_set_extension(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.extension_.Set(value, GetArenaForAllocation());
}
inline std::string* PhoneNumber::_internal_mutable_extension() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.extension_.Mutable(GetArenaForAllocation());
}
inline std::string* PhoneNumber::release_extension() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumber.extension)
  if (!_internal_has_extension()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.extension_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extension_.IsDefault()) {
    _impl_.extension_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PhoneNumber::set_allocated_extension(std::string* extension) {
  if (extension != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.extension_.SetAllocated(extension, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extension_.IsDefault()) {
    _impl_.extension_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumber.extension)
}

// optional bool italian_leading_zero = 4;
inline bool PhoneNumber::_internal_has_italian_leading_zero() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PhoneNumber::has_italian_leading_zero() const {
  return _internal_has_italian_leading_zero();
}
inline void PhoneNumber::clear_italian_leading_zero() {
  _impl_.italian_leading_zero_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool PhoneNumber::_internal_italian_leading_zero() const {
  return _impl_.italian_leading_zero_;
}
inline bool PhoneNumber::italian_leading_zero() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.italian_leading_zero)
  return _internal_italian_leading_zero();
}
inline void PhoneNumber::_internal_set_italian_leading_zero(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.italian_leading_zero_ = value;
}
inline void PhoneNumber::set_italian_leading_zero(bool value) {
  _internal_set_italian_leading_zero(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.italian_leading_zero)
}

// optional int32 number_of_leading_zeros = 8 [default = 1];
inline bool PhoneNumber::_internal_has_number_of_leading_zeros() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PhoneNumber::has_number_of_leading_zeros() const {
  return _internal_has_number_of_leading_zeros();
}
inline void PhoneNumber::clear_number_of_leading_zeros() {
  _impl_.number_of_leading_zeros_ = 1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t PhoneNumber::_internal_number_of_leading_zeros() const {
  return _impl_.number_of_leading_zeros_;
}
inline int32_t PhoneNumber::number_of_leading_zeros() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.number_of_leading_zeros)
  return _internal_number_of_leading_zeros();
}
inline void PhoneNumber::_internal_set_number_of_leading_zeros(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.number_of_leading_zeros_ = value;
}
inline void PhoneNumber::set_number_of_leading_zeros(int32_t value) {
  _internal_set_number_of_leading_zeros(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.number_of_leading_zeros)
}

// optional string raw_input = 5;
inline bool PhoneNumber::_internal_has_raw_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PhoneNumber::has_raw_input() const {
  return _internal_has_raw_input();
}
inline void PhoneNumber::clear_raw_input() {
  _impl_.raw_input_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PhoneNumber::raw_input() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.raw_input)
  return _internal_raw_input();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhoneNumber::set_raw_input(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.raw_input_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.raw_input)
}
inline std::string* PhoneNumber::mutable_raw_input() {
  std::string* _s = _internal_mutable_raw_input();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumber.raw_input)
  return _s;
}
inline const std::string& PhoneNumber::_internal_raw_input() const {
  return _impl_.raw_input_.Get();
}
inline void PhoneNumber::_internal_set_raw_input(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.raw_input_.Set(value, GetArenaForAllocation());
}
inline std::string* PhoneNumber::_internal_mutable_raw_input() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.raw_input_.Mutable(GetArenaForAllocation());
}
inline std::string* PhoneNumber::release_raw_input() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumber.raw_input)
  if (!_internal_has_raw_input()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.raw_input_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_input_.IsDefault()) {
    _impl_.raw_input_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PhoneNumber::set_allocated_raw_input(std::string* raw_input) {
  if (raw_input != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.raw_input_.SetAllocated(raw_input, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_input_.IsDefault()) {
    _impl_.raw_input_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumber.raw_input)
}

// optional .i18n.phonenumbers.PhoneNumber.CountryCodeSource country_code_source = 6;
inline bool PhoneNumber::_internal_has_country_code_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PhoneNumber::has_country_code_source() const {
  return _internal_has_country_code_source();
}
inline void PhoneNumber::clear_country_code_source() {
  _impl_.country_code_source_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::i18n::phonenumbers::PhoneNumber_CountryCodeSource PhoneNumber::_internal_country_code_source() const {
  return static_cast< ::i18n::phonenumbers::PhoneNumber_CountryCodeSource >(_impl_.country_code_source_);
}
inline ::i18n::phonenumbers::PhoneNumber_CountryCodeSource PhoneNumber::country_code_source() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.country_code_source)
  return _internal_country_code_source();
}
inline void PhoneNumber::_internal_set_country_code_source(::i18n::phonenumbers::PhoneNumber_CountryCodeSource value) {
  assert(::i18n::phonenumbers::PhoneNumber_CountryCodeSource_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.country_code_source_ = value;
}
inline void PhoneNumber::set_country_code_source(::i18n::phonenumbers::PhoneNumber_CountryCodeSource value) {
  _internal_set_country_code_source(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.country_code_source)
}

// optional string preferred_domestic_carrier_code = 7;
inline bool PhoneNumber::_internal_has_preferred_domestic_carrier_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PhoneNumber::has_preferred_domestic_carrier_code() const {
  return _internal_has_preferred_domestic_carrier_code();
}
inline void PhoneNumber::clear_preferred_domestic_carrier_code() {
  _impl_.preferred_domestic_carrier_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PhoneNumber::preferred_domestic_carrier_code() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
  return _internal_preferred_domestic_carrier_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhoneNumber::set_preferred_domestic_carrier_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.preferred_domestic_carrier_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
}
inline std::string* PhoneNumber::mutable_preferred_domestic_carrier_code() {
  std::string* _s = _internal_mutable_preferred_domestic_carrier_code();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
  return _s;
}
inline const std::string& PhoneNumber::_internal_preferred_domestic_carrier_code() const {
  return _impl_.preferred_domestic_carrier_code_.Get();
}
inline void PhoneNumber::_internal_set_preferred_domestic_carrier_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.preferred_domestic_carrier_code_.Set(value, GetArenaForAllocation());
}
inline std::string* PhoneNumber::_internal_mutable_preferred_domestic_carrier_code() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.preferred_domestic_carrier_code_.Mutable(GetArenaForAllocation());
}
inline std::string* PhoneNumber::release_preferred_domestic_carrier_code() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
  if (!_internal_has_preferred_domestic_carrier_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.preferred_domestic_carrier_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.preferred_domestic_carrier_code_.IsDefault()) {
    _impl_.preferred_domestic_carrier_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PhoneNumber::set_allocated_preferred_domestic_carrier_code(std::string* preferred_domestic_carrier_code) {
  if (preferred_domestic_carrier_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.preferred_domestic_carrier_code_.SetAllocated(preferred_domestic_carrier_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.preferred_domestic_carrier_code_.IsDefault()) {
    _impl_.preferred_domestic_carrier_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace phonenumbers
}  // namespace i18n

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::i18n::phonenumbers::PhoneNumber_CountryCodeSource> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_phonenumber_2eproto
