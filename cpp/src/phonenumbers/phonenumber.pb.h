// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phonenumber.proto

#ifndef PROTOBUF_phonenumber_2eproto__INCLUDED
#define PROTOBUF_phonenumber_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace i18n {
namespace phonenumbers {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_phonenumber_2eproto();
void protobuf_AssignDesc_phonenumber_2eproto();
void protobuf_ShutdownFile_phonenumber_2eproto();

class PhoneNumber;

enum PhoneNumber_CountryCodeSource {
  PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_PLUS_SIGN = 1,
  PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_IDD = 5,
  PhoneNumber_CountryCodeSource_FROM_NUMBER_WITHOUT_PLUS_SIGN = 10,
  PhoneNumber_CountryCodeSource_FROM_DEFAULT_COUNTRY = 20
};
bool PhoneNumber_CountryCodeSource_IsValid(int value);
const PhoneNumber_CountryCodeSource PhoneNumber_CountryCodeSource_CountryCodeSource_MIN = PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_PLUS_SIGN;
const PhoneNumber_CountryCodeSource PhoneNumber_CountryCodeSource_CountryCodeSource_MAX = PhoneNumber_CountryCodeSource_FROM_DEFAULT_COUNTRY;
const int PhoneNumber_CountryCodeSource_CountryCodeSource_ARRAYSIZE = PhoneNumber_CountryCodeSource_CountryCodeSource_MAX + 1;

// ===================================================================

class PhoneNumber : public ::google::protobuf::MessageLite {
 public:
  PhoneNumber();
  virtual ~PhoneNumber();

  PhoneNumber(const PhoneNumber& from);

  inline PhoneNumber& operator=(const PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }

  static const PhoneNumber& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PhoneNumber* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PhoneNumber* other);

  // implements Message ----------------------------------------------

  PhoneNumber* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PhoneNumber& from);
  void MergeFrom(const PhoneNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef PhoneNumber_CountryCodeSource CountryCodeSource;
  static const CountryCodeSource FROM_NUMBER_WITH_PLUS_SIGN = PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_PLUS_SIGN;
  static const CountryCodeSource FROM_NUMBER_WITH_IDD = PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_IDD;
  static const CountryCodeSource FROM_NUMBER_WITHOUT_PLUS_SIGN = PhoneNumber_CountryCodeSource_FROM_NUMBER_WITHOUT_PLUS_SIGN;
  static const CountryCodeSource FROM_DEFAULT_COUNTRY = PhoneNumber_CountryCodeSource_FROM_DEFAULT_COUNTRY;
  static inline bool CountryCodeSource_IsValid(int value) {
    return PhoneNumber_CountryCodeSource_IsValid(value);
  }
  static const CountryCodeSource CountryCodeSource_MIN =
    PhoneNumber_CountryCodeSource_CountryCodeSource_MIN;
  static const CountryCodeSource CountryCodeSource_MAX =
    PhoneNumber_CountryCodeSource_CountryCodeSource_MAX;
  static const int CountryCodeSource_ARRAYSIZE =
    PhoneNumber_CountryCodeSource_CountryCodeSource_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required int32 country_code = 1;
  inline bool has_country_code() const;
  inline void clear_country_code();
  static const int kCountryCodeFieldNumber = 1;
  inline ::google::protobuf::int32 country_code() const;
  inline void set_country_code(::google::protobuf::int32 value);

  // required uint64 national_number = 2;
  inline bool has_national_number() const;
  inline void clear_national_number();
  static const int kNationalNumberFieldNumber = 2;
  inline ::google::protobuf::uint64 national_number() const;
  inline void set_national_number(::google::protobuf::uint64 value);

  // optional string extension = 3;
  inline bool has_extension() const;
  inline void clear_extension();
  static const int kExtensionFieldNumber = 3;
  inline const ::std::string& extension() const;
  inline void set_extension(const ::std::string& value);
  inline void set_extension(const char* value);
  inline void set_extension(const char* value, size_t size);
  inline ::std::string* mutable_extension();
  inline ::std::string* release_extension();
  inline void set_allocated_extension(::std::string* extension);

  // optional bool italian_leading_zero = 4;
  inline bool has_italian_leading_zero() const;
  inline void clear_italian_leading_zero();
  static const int kItalianLeadingZeroFieldNumber = 4;
  inline bool italian_leading_zero() const;
  inline void set_italian_leading_zero(bool value);

  // optional int32 number_of_leading_zeros = 8 [default = 1];
  inline bool has_number_of_leading_zeros() const;
  inline void clear_number_of_leading_zeros();
  static const int kNumberOfLeadingZerosFieldNumber = 8;
  inline ::google::protobuf::int32 number_of_leading_zeros() const;
  inline void set_number_of_leading_zeros(::google::protobuf::int32 value);

  // optional string raw_input = 5;
  inline bool has_raw_input() const;
  inline void clear_raw_input();
  static const int kRawInputFieldNumber = 5;
  inline const ::std::string& raw_input() const;
  inline void set_raw_input(const ::std::string& value);
  inline void set_raw_input(const char* value);
  inline void set_raw_input(const char* value, size_t size);
  inline ::std::string* mutable_raw_input();
  inline ::std::string* release_raw_input();
  inline void set_allocated_raw_input(::std::string* raw_input);

  // optional .i18n.phonenumbers.PhoneNumber.CountryCodeSource country_code_source = 6;
  inline bool has_country_code_source() const;
  inline void clear_country_code_source();
  static const int kCountryCodeSourceFieldNumber = 6;
  inline ::i18n::phonenumbers::PhoneNumber_CountryCodeSource country_code_source() const;
  inline void set_country_code_source(::i18n::phonenumbers::PhoneNumber_CountryCodeSource value);

  // optional string preferred_domestic_carrier_code = 7;
  inline bool has_preferred_domestic_carrier_code() const;
  inline void clear_preferred_domestic_carrier_code();
  static const int kPreferredDomesticCarrierCodeFieldNumber = 7;
  inline const ::std::string& preferred_domestic_carrier_code() const;
  inline void set_preferred_domestic_carrier_code(const ::std::string& value);
  inline void set_preferred_domestic_carrier_code(const char* value);
  inline void set_preferred_domestic_carrier_code(const char* value, size_t size);
  inline ::std::string* mutable_preferred_domestic_carrier_code();
  inline ::std::string* release_preferred_domestic_carrier_code();
  inline void set_allocated_preferred_domestic_carrier_code(::std::string* preferred_domestic_carrier_code);

  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.PhoneNumber)
 private:
  inline void set_has_country_code();
  inline void clear_has_country_code();
  inline void set_has_national_number();
  inline void clear_has_national_number();
  inline void set_has_extension();
  inline void clear_has_extension();
  inline void set_has_italian_leading_zero();
  inline void clear_has_italian_leading_zero();
  inline void set_has_number_of_leading_zeros();
  inline void clear_has_number_of_leading_zeros();
  inline void set_has_raw_input();
  inline void clear_has_raw_input();
  inline void set_has_country_code_source();
  inline void clear_has_country_code_source();
  inline void set_has_preferred_domestic_carrier_code();
  inline void clear_has_preferred_domestic_carrier_code();

  ::google::protobuf::uint64 national_number_;
  ::google::protobuf::int32 country_code_;
  bool italian_leading_zero_;
  ::std::string* extension_;
  ::std::string* raw_input_;
  ::google::protobuf::int32 number_of_leading_zeros_;
  int country_code_source_;
  ::std::string* preferred_domestic_carrier_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_phonenumber_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_phonenumber_2eproto();
  #endif
  friend void protobuf_AssignDesc_phonenumber_2eproto();
  friend void protobuf_ShutdownFile_phonenumber_2eproto();

  void InitAsDefaultInstance();
  static PhoneNumber* default_instance_;
};
// ===================================================================


// ===================================================================

// PhoneNumber

// required int32 country_code = 1;
inline bool PhoneNumber::has_country_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhoneNumber::set_has_country_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhoneNumber::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhoneNumber::clear_country_code() {
  country_code_ = 0;
  clear_has_country_code();
}
inline ::google::protobuf::int32 PhoneNumber::country_code() const {
  return country_code_;
}
inline void PhoneNumber::set_country_code(::google::protobuf::int32 value) {
  set_has_country_code();
  country_code_ = value;
}

// required uint64 national_number = 2;
inline bool PhoneNumber::has_national_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhoneNumber::set_has_national_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhoneNumber::clear_has_national_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhoneNumber::clear_national_number() {
  national_number_ = GOOGLE_ULONGLONG(0);
  clear_has_national_number();
}
inline ::google::protobuf::uint64 PhoneNumber::national_number() const {
  return national_number_;
}
inline void PhoneNumber::set_national_number(::google::protobuf::uint64 value) {
  set_has_national_number();
  national_number_ = value;
}

// optional string extension = 3;
inline bool PhoneNumber::has_extension() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PhoneNumber::set_has_extension() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PhoneNumber::clear_has_extension() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PhoneNumber::clear_extension() {
  if (extension_ != &::google::protobuf::internal::kEmptyString) {
    extension_->clear();
  }
  clear_has_extension();
}
inline const ::std::string& PhoneNumber::extension() const {
  return *extension_;
}
inline void PhoneNumber::set_extension(const ::std::string& value) {
  set_has_extension();
  if (extension_ == &::google::protobuf::internal::kEmptyString) {
    extension_ = new ::std::string;
  }
  extension_->assign(value);
}
inline void PhoneNumber::set_extension(const char* value) {
  set_has_extension();
  if (extension_ == &::google::protobuf::internal::kEmptyString) {
    extension_ = new ::std::string;
  }
  extension_->assign(value);
}
inline void PhoneNumber::set_extension(const char* value, size_t size) {
  set_has_extension();
  if (extension_ == &::google::protobuf::internal::kEmptyString) {
    extension_ = new ::std::string;
  }
  extension_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PhoneNumber::mutable_extension() {
  set_has_extension();
  if (extension_ == &::google::protobuf::internal::kEmptyString) {
    extension_ = new ::std::string;
  }
  return extension_;
}
inline ::std::string* PhoneNumber::release_extension() {
  clear_has_extension();
  if (extension_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extension_;
    extension_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PhoneNumber::set_allocated_extension(::std::string* extension) {
  if (extension_ != &::google::protobuf::internal::kEmptyString) {
    delete extension_;
  }
  if (extension) {
    set_has_extension();
    extension_ = extension;
  } else {
    clear_has_extension();
    extension_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool italian_leading_zero = 4;
inline bool PhoneNumber::has_italian_leading_zero() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PhoneNumber::set_has_italian_leading_zero() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PhoneNumber::clear_has_italian_leading_zero() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PhoneNumber::clear_italian_leading_zero() {
  italian_leading_zero_ = false;
  clear_has_italian_leading_zero();
}
inline bool PhoneNumber::italian_leading_zero() const {
  return italian_leading_zero_;
}
inline void PhoneNumber::set_italian_leading_zero(bool value) {
  set_has_italian_leading_zero();
  italian_leading_zero_ = value;
}

// optional int32 number_of_leading_zeros = 8 [default = 1];
inline bool PhoneNumber::has_number_of_leading_zeros() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PhoneNumber::set_has_number_of_leading_zeros() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PhoneNumber::clear_has_number_of_leading_zeros() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PhoneNumber::clear_number_of_leading_zeros() {
  number_of_leading_zeros_ = 1;
  clear_has_number_of_leading_zeros();
}
inline ::google::protobuf::int32 PhoneNumber::number_of_leading_zeros() const {
  return number_of_leading_zeros_;
}
inline void PhoneNumber::set_number_of_leading_zeros(::google::protobuf::int32 value) {
  set_has_number_of_leading_zeros();
  number_of_leading_zeros_ = value;
}

// optional string raw_input = 5;
inline bool PhoneNumber::has_raw_input() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PhoneNumber::set_has_raw_input() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PhoneNumber::clear_has_raw_input() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PhoneNumber::clear_raw_input() {
  if (raw_input_ != &::google::protobuf::internal::kEmptyString) {
    raw_input_->clear();
  }
  clear_has_raw_input();
}
inline const ::std::string& PhoneNumber::raw_input() const {
  return *raw_input_;
}
inline void PhoneNumber::set_raw_input(const ::std::string& value) {
  set_has_raw_input();
  if (raw_input_ == &::google::protobuf::internal::kEmptyString) {
    raw_input_ = new ::std::string;
  }
  raw_input_->assign(value);
}
inline void PhoneNumber::set_raw_input(const char* value) {
  set_has_raw_input();
  if (raw_input_ == &::google::protobuf::internal::kEmptyString) {
    raw_input_ = new ::std::string;
  }
  raw_input_->assign(value);
}
inline void PhoneNumber::set_raw_input(const char* value, size_t size) {
  set_has_raw_input();
  if (raw_input_ == &::google::protobuf::internal::kEmptyString) {
    raw_input_ = new ::std::string;
  }
  raw_input_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PhoneNumber::mutable_raw_input() {
  set_has_raw_input();
  if (raw_input_ == &::google::protobuf::internal::kEmptyString) {
    raw_input_ = new ::std::string;
  }
  return raw_input_;
}
inline ::std::string* PhoneNumber::release_raw_input() {
  clear_has_raw_input();
  if (raw_input_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_input_;
    raw_input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PhoneNumber::set_allocated_raw_input(::std::string* raw_input) {
  if (raw_input_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_input_;
  }
  if (raw_input) {
    set_has_raw_input();
    raw_input_ = raw_input;
  } else {
    clear_has_raw_input();
    raw_input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .i18n.phonenumbers.PhoneNumber.CountryCodeSource country_code_source = 6;
inline bool PhoneNumber::has_country_code_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PhoneNumber::set_has_country_code_source() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PhoneNumber::clear_has_country_code_source() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PhoneNumber::clear_country_code_source() {
  country_code_source_ = 1;
  clear_has_country_code_source();
}
inline ::i18n::phonenumbers::PhoneNumber_CountryCodeSource PhoneNumber::country_code_source() const {
  return static_cast< ::i18n::phonenumbers::PhoneNumber_CountryCodeSource >(country_code_source_);
}
inline void PhoneNumber::set_country_code_source(::i18n::phonenumbers::PhoneNumber_CountryCodeSource value) {
  assert(::i18n::phonenumbers::PhoneNumber_CountryCodeSource_IsValid(value));
  set_has_country_code_source();
  country_code_source_ = value;
}

// optional string preferred_domestic_carrier_code = 7;
inline bool PhoneNumber::has_preferred_domestic_carrier_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PhoneNumber::set_has_preferred_domestic_carrier_code() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PhoneNumber::clear_has_preferred_domestic_carrier_code() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PhoneNumber::clear_preferred_domestic_carrier_code() {
  if (preferred_domestic_carrier_code_ != &::google::protobuf::internal::kEmptyString) {
    preferred_domestic_carrier_code_->clear();
  }
  clear_has_preferred_domestic_carrier_code();
}
inline const ::std::string& PhoneNumber::preferred_domestic_carrier_code() const {
  return *preferred_domestic_carrier_code_;
}
inline void PhoneNumber::set_preferred_domestic_carrier_code(const ::std::string& value) {
  set_has_preferred_domestic_carrier_code();
  if (preferred_domestic_carrier_code_ == &::google::protobuf::internal::kEmptyString) {
    preferred_domestic_carrier_code_ = new ::std::string;
  }
  preferred_domestic_carrier_code_->assign(value);
}
inline void PhoneNumber::set_preferred_domestic_carrier_code(const char* value) {
  set_has_preferred_domestic_carrier_code();
  if (preferred_domestic_carrier_code_ == &::google::protobuf::internal::kEmptyString) {
    preferred_domestic_carrier_code_ = new ::std::string;
  }
  preferred_domestic_carrier_code_->assign(value);
}
inline void PhoneNumber::set_preferred_domestic_carrier_code(const char* value, size_t size) {
  set_has_preferred_domestic_carrier_code();
  if (preferred_domestic_carrier_code_ == &::google::protobuf::internal::kEmptyString) {
    preferred_domestic_carrier_code_ = new ::std::string;
  }
  preferred_domestic_carrier_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PhoneNumber::mutable_preferred_domestic_carrier_code() {
  set_has_preferred_domestic_carrier_code();
  if (preferred_domestic_carrier_code_ == &::google::protobuf::internal::kEmptyString) {
    preferred_domestic_carrier_code_ = new ::std::string;
  }
  return preferred_domestic_carrier_code_;
}
inline ::std::string* PhoneNumber::release_preferred_domestic_carrier_code() {
  clear_has_preferred_domestic_carrier_code();
  if (preferred_domestic_carrier_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = preferred_domestic_carrier_code_;
    preferred_domestic_carrier_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PhoneNumber::set_allocated_preferred_domestic_carrier_code(::std::string* preferred_domestic_carrier_code) {
  if (preferred_domestic_carrier_code_ != &::google::protobuf::internal::kEmptyString) {
    delete preferred_domestic_carrier_code_;
  }
  if (preferred_domestic_carrier_code) {
    set_has_preferred_domestic_carrier_code();
    preferred_domestic_carrier_code_ = preferred_domestic_carrier_code;
  } else {
    clear_has_preferred_domestic_carrier_code();
    preferred_domestic_carrier_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace phonenumbers
}  // namespace i18n

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_phonenumber_2eproto__INCLUDED
